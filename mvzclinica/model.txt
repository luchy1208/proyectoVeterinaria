from django.db import models
from django.contrib.auth.models import AbstractUser
from django.conf import settings
from django.utils import timezone

# Create your models here.


# hematologia = [('Plaq',"Recuento de plaquetas"),('RR',"RecuentoReticulocitos"),('RDL', "RecuentoDiferencialLeucocitario"),
#                         ('HTC',"Hematocrito"),('Hgb',"Hemoglobina"),('proteínas totales',"ProteinasTotales"),
#                         ('Hemoparasitos', "Hemoparasitos"), ('RD',"Recuento diferencial"), ('Celulas L.E',"Celulas L.E")]
        
# pruebasCoagulacion =[('PT',"Tiempo de protrombina"),('PTT',"Tiempo de tromboplastina parcial activado")]
        
# quimicaSanguinea = [ ("AB's", "Ácidos biliares"),('URAC',"ÁcidoÚrico"),('Amilasa',"Amilasa"), ('Bilirrubinas totales y diferenciadas', "Bilirrubinas totales y diferenciadas"),
#                         ('Calcio (iónico y sérico)',"Calcio (iónico y sérico)"), ('CK Total',"CK Total"), ('Cl', "Cloro"),
#                         ('Colesterol',"Colesterol"), ('HDL',"HDL"), ('LDL',"Colesterol"), ('Colesterol Total', 'Colesterol Total'),
#                         ('Cr', 'Creatinina'), ('Fructosamina', 'Fructosamina'), ('FA', 'Fosfatasa Alcalina'),
#                         ('ALB', 'Albumina'), ('Electrolitos (Na, K, Cl)', 'Electrolitos (Na, K, Cl)'), ('Proteínas totales', 'Proteínas totales'),
#                         ('P', 'Fósforo'), ('GGT', 'Gama Glutamil Transpeptidasa'), ('Glicemia', 'Glicemia'),
#                         ('Láctica Deshidrogenasa (DHL)', 'Láctica Deshidrogenasa (DHL)'), ('Lipasa', 'Lipasa'), ('Lipasa felina', 'Lipasa felina'),
#                         ('Nitrógeno Ureico', 'Nitrógeno Ureico'), ('Proteínas totales y diferenciadas', 'Proteínas totales y diferenciadas'),
#                         ('Transaminasa ALT', 'Transaminasa ALT'), ('Transaminasa ASAT', 'Transaminasa ASAT'), ('TG', 'Triglicéridos'),
#                         ('TIR', 'Tripsina inmunoreactiva'), ('BUN', 'Urea sanguínea')
#                     ]

# analisisLiquidosCorporales=[
#                         ('LCR', 'Liquido Cefalorraquideo'),('LAP/P', 'Liquido Ascitico, pleural o peritoneal'),
#                         ('LS', 'Liquido Sinovial'), ('LP', 'Liquido Pericárdico')
#                     ]
        
# hormonas=  [('T4 Total', 'T4 Total'), ('T4 Libre', 'T4 Libre'), ('TSH', 'TSH'), ('E2', 'Estradiol'),
#                         ('Cortisol', 'Cortisol'), ('Testosterona', 'Testosterona'), ('P4', 'Progesterona'), ('Insulina', 'Insulina'),
#                         ('HPT', 'Paratohormona'), ('LH', 'Hormona Luteinizante'),
#                         ('FSH', 'Hormona foliculo estimulante'),('ACTH', 'Hormona adrenocorticotropica'), ('PRL', 'Prolactina')
#                     ]

# parasitologia = [('Coprológico', 'Coprológico'), ('Coproscópico', 'Coproscópico'), ('Coloración ZN', 'Coloración ZN'),('FOBT', 'Sangre Oculta')
#                     ]

# orina= [('Parcial de Orina', 'Parcial de Orina'), ('ACR', 'Análisis Cálculo Renal')]

# examenesDirectos=[('Coloración de Gram', 'Coloración de Gram'), ('Diagnóstico Malassezia', 'Diagnóstico Malassezia'),
#                         ('Raspado de piel', 'Raspado de piel')
#                     ]

# cultivos= [('ASONO', 'Antibiograma secreciones óticas, nasales u oculares'),('Urocultivo con Antibiograma', 'Urocultivo con Antibiograma'),
#         ('Cultivo de Hongos', 'Cultivo de Hongos'),('Hemocultivo', 'Hemocultivo')
#                     ]

# citologias= [ ('CEV', 'Citología exfoliativa vaginal'),('CLAP', 'Citología líquido ascítico, pleural'),
#                         ('Citología para TVT', 'Citología para TVT'), ('Espermograma Básico', 'Espermograma Básico')
#                     ]

# toxicologia= [('Cobre', 'Cobre'), ('Plomo en orina', 'Plomo en orina'), ('Talio', 'Talio'), ('Alcohol metílico', 'Alcohol metílico')]

# miscelaneos= [ ('Autovacuna', 'Autovacuna'), ('Amonio', 'Amonio'),('Hemoglobina Glicosilada fracción A1c', 'Hemoglobina Glicosilada fracción A1c'),
#                         ('Fenobarbital', 'Fenobarbital'), ('Calcitonina', 'Calcitonina'), ('Dímero D', 'Dímero D'),('Proteína C reactiva', 'Proteína C reactiva'),
#                         ('Troponina I', 'Troponina I'),('Vitamina B12 (cianocobalamina)', 'Vitamina B12 (cianocobalamina)'),
#                         ('Vitamina D 125 Dihidroxi', 'Vitamina D 125 Dihidroxi'),('Vitamina D 25 Hidroxi (calciferol)', 'Vitamina D 25 Hidroxi (calciferol)')
#                     ]

# enfermedadesInfecciosasCaninos =[
#                         ('Brucella canis', 'Brucella canis'), ('Distemper (Antígeno)', 'Distemper (Antígeno)'),('Anticuerpos tipo IgG contra Parvovirus Canino', 'Anticuerpos tipo IgG contra Parvovirus Canino'),
#                         ('Distemper canino', 'Distemper canino'), ('Adenovirus tipo II', 'Adenovirus tipo II'),('Serología Herpesvirus canino', 'Serología Herpesvirus canino'), ('Serología Leptospira', 'Serología Leptospira'),
#                         ('PCRun para Ehrlichia sp', 'PCRun para Ehrlichia sp'),('Anticuerpos totales contra Leishmania infantum', 'Anticuerpos totales contra Leishmania infantum'),
#                         ('Anticuerpos totales contra Toxoplasma gondii', 'Anticuerpos totales contra Toxoplasma gondii'),('Anticuerpos tipo IgG contra Ehrlichia', 'Anticuerpos tipo IgG contra Ehrlichia'),
#                         ('PCR para Ehrlichia canis', 'PCR para Ehrlichia canis')
#                     ]

# enfermedadesFelinos= [
#                         ('SNAP 2DX', 'SNAP 2DX'), ('FIV-VILEF', 'FIV-VILEF'),('Peritonitis Infecciosa Felina', 'Peritonitis Infecciosa Felina'),
#                         ('Anticuerpos totales contra Coronavirus felino', 'Anticuerpos totales contra Coronavirus felino'),('Anticuerpos totales contra Toxoplasma gondii', 'Anticuerpos totales contra Toxoplasma gondii'),
#                         ('Virus de la panleucopenia felina, Calicivirus y rinotraqueitis (Herpesvirus)', 'Virus de la panleucopenia felina, Calicivirus y rinotraqueitis (Herpesvirus)'),
#                         ('PCRun para Mycoplasma haemofelis', 'PCRun para Mycoplasma haemofelis')
#                     ]

rol = [
    ('Administrativo',"Administrativo"),('MedicoVeterinario',"MedicoVeterinario"),('AuxiliarVeterinario',"AuxiliarVeterinario"),
]

# tipoServicio = [
#     ('Consulta Veterinaria',"Consulta Veterinaria"),('Vacunacion',"Vacunacion"),('Desparasitacion',"Desparasitación"),('Certificacion',"Certificacion"),('Asesorias',"Asesorías"),('Profilaxis',"Profilaxis"),
# ]

tipoServicio = [
    ('ServicioBasico',"ServicioBasico"),('ServicioBienestar',"ServicioBienestar"),('OtrosServicios',"OtrosServicios"),
]
            

# examenesEspecializados = [
#     ('Eco',"Ecografía"),('TC',"TomografiaComputarizada"),('RM',"ResonanciaMagnética"),('CSP',"CultivoSencibilidadPeritoniana"),('E',"Endoscopia"),
#     ('ECO',"Ecocardiografia"),('ELECTRO',"Electrocardiograma"),('A',"Artroscopia"),('RX',"Radiografia"),
#     ('RC',"Radiografia Contrastada"),('GO',"GrammagrafiaOsea"),('ANG',"Angiografia")
# ]
estadoCita=[
    ('Pendiente',"Pendiente"),('Atendida',"Atendida"),('Cancelada',"Cancelada"),
]
tipoUsuario=[
    ('Administrativo','Administrativo'),('Veterinario','Veterinario'),('Auxiliar','Auxiliar'),('Cliente','Cliente'),
]
sexoMascota = [
    ('Hembra',"Hembra"),('Macho',"Macho"),
]
especie = [
    ('Canino',"Canino"),('Felino',"Felino"),('Reptil',"Reptil"),('Roedor',"Roedor"),('Ave',"Ave"),('Pez',"Pez"),('Otro',"Otro"),
]
tamañoMascota= [
    ('P',"Pequeño"),('M',"Mediano"),('G',"Grande"),('EG',"Extragrande"),
]
longitudPelo=[
    ('SinPelo',"Sin Pelo"),('Pelo Corto',"Pelo Corto"),('Pelo Largo',"Pelo Largo"),('Pelo Crespo',"PeloCrespo"),('Pelo Liso',"Pelo liso"),
]

dietaMascota =[
    ('Concentrado',"Concentrado"),('DietaBARF',"DietaBARF"),('DietaBlanda',"DietaBlanda"),('ComidaCasera',"ComidaCasera"),('Otra',"Otra"),
]
tipoDocumento = [
    ('Cedula Ciudadania',"Cedula ciudadania"),('Cedula Extrangera',"Cedula Extrangera"),
]


class User(AbstractUser):
    #useId = models.IntegerField(db_comment="documento de la persona")
    #useNombres = models.CharField(max_length=25,db_comment="Nombres de la persona")
    #useTelefono = models.CharField(max_length=15,db_comment="Telefono de la persona")
    userFoto = models.FileField(upload_to=f"fotos/", null=True, blank=True,db_comment="Foto del Usuario")
    userTipo = models.CharField(max_length=18,choices=tipoUsuario,db_comment="Nombre Tipo de usuario")
    #useCorreo = models.CharField(max_length=50,db_comment="Correo de la persona")
    #usePassword = models.CharField(max_length=50,db_comment="password de la persona")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora del registro")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización")
    
    def __str__(self):
        return f"{self.username}-{self.userTipo}"

class Mascota(models.Model):
    masCodigo = models.IntegerField(unique=True,db_comment="codigo único asignado al registro de la mascota")    
    masCliUsuario = models.ForeignKey(settings.AUTH_USER_MODEL,on_delete=models.PROTECT,
                                db_comment="usuario #que lleva la mascota ahh la consulta veterinaria")
    masNombre = models.CharField(max_length=50,db_comment="Nombre de la mascota")    
    masEspecie = models.CharField(max_length=7,choices=especie,db_comment="Tipo de mascota")
    masRaza = models.CharField(max_length=15,db_comment="Raza de la mascota")    
    masColor = models.CharField(max_length=15,db_comment="Color de la mascota")    
    masSexo = models.CharField(max_length=7,choices=sexoMascota,db_comment="sexo de la mascota")
    masFecNacimiento = models.DateTimeField(db_comment="Fecha de nacimiento de la mascota")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora del registro de la mascota")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización de la mascota")

def __str__(self)->str:
    return f"{self.masCodigo}-{self.masNombre}-{self.masCliUsuario}"

#class Cliente(models.Model):
#   cliIdentificacion = models.CharField(max_length=15, unique=True, db_comment="Identificacion de la Cliente")
#   cliNombres = models.CharField(max_length=25,db_comment="Nombres de la Cliente")
#   cliApellidos = models.CharField(max_length=25,db_comment="Apellidos de la Cliente")
    #cliCorreo = models.CharField(max_length=50,db_comment="Correo de la Cliente")
    #cliTelefono = models.CharField(max_length=15,db_comment="Telefono de la Cliente")
    #cliDireccion = models.CharField(max_length=100,db_comment="Direccion de la Cliente")
    #cliMascota = models.ForeignKey(Mascota, on_delete=models.PROTECT,db_comment="Informacion de la mascota")
    #fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora del registro")
    #fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización")
    
    #def _str_(self):
    #    return f"{self.perIdentificacion}"
# class ServiciosBasicos(models.Model):
#     serBasCodigo = models.IntegerField(unique=True,db_comment="codigo único asignado al registro de servicio basico")    
#     serBasMascota = models.ForeignKey(Mascota, on_delete=models.PROTECT,db_comment="Informacion de la mascota")
#     serBasTipServicio = models.CharField(max_length=20,choices=tipoServicio,db_comment="tipo de servicio basico")
#     fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización")


class ExamenClinico(models.Model):
    exaCliTemperatura = models.SmallIntegerField(db_comment="T° corporal: 35,36,37..")    
    exaClifreCardiaca = models.SmallIntegerField(null=True,db_comment="Frecuencia cardiaca:..")
    exaCliFreRespiratoria = models.SmallIntegerField(null=True,db_comment="Frecuencia Respiratoria:..")
    exaCliPulso = models.SmallIntegerField(null=True,db_comment="numero de pulsaciones por minuto:..")
    exaCliEstConciencia = models.CharField(max_length=50,db_comment="describir el estado de conciencia de la mascota") 
    exaCliTemperamento =  models.CharField(max_length=25,db_comment="Temperamento de la mascota") 
    exaCliSisDermatológico = models.TextField(null=True,db_comment="descripcion del sistema Dermatológico")
    exaCliSisRespiratorio = models.TextField(null=True,db_comment="descripcion del sistema Respiratorio")
    exaCliSisCardiovascular = models.TextField(null=True,db_comment="descripcion del sistema Cardiovascular")
    exaCliSisDigestivo = models.TextField(null=True,db_comment="descripcion del sistema Digestivo")
    exaCliSisUrinario = models.TextField(null=True,db_comment="descripcion del sistema Urinario")
    exaCliSisReproductor = models.TextField(null=True,db_comment="descripcion del sistema Reproductor")
    exaCliSisLocomotor= models.TextField(null=True,db_comment="descripcion del sistema Locomotor")
    exaCliOftalmológico = models.TextField(null=True,db_comment="descripcion del examen clinico Oftalmológico")
    exaCliOtológico = models.TextField(null=True,db_comment="descripcion del examen clinico Otológico")
    exaCliNeurológico = models.TextField(null=True,db_comment="descripcion del examen clinico Neurológico")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora del registro de la mascota")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización de la mascota")
    
    def __str__(self)->str:
        return f"{self.exaMascota}-{self.exaTemperatura}-{self.exafreCardiaca}-{self.exaFreRespiratoria}-{self.exaPulso}-{self.exaEstConciencia}-{self.exaTemperamento}"


class HistoriaClinica(models.Model):
    hisCliCodigo = models.IntegerField(unique=True, db_comment="codigo de Historia Clinica")
    hisCliAcompanante= models.CharField(max_length=100,db_comment="Nombre de la persona que ingresa con la mascota")
    hisCliVetUsuario = models.ForeignKey(settings.AUTH_USER_MODEL,on_delete=models.PROTECT,
                                         db_comment="Hace referencia a usuario")
    hisCliMascota = models.ForeignKey(Mascota, on_delete=models.PROTECT,db_comment="Informacion de la mascota")
    hisCliMotConsulta = models.TextField(null=True,db_comment="detalladamente se escribe el motivo porque se lleva la mascota a consulta")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora de creacion de la Historia Clinica")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización de la mascota")
    hisCliUltCelo = models.DateField(db_comment="Hace referencia a la fecha del ultimo celo de la mascota")
    hisCliNumPartos = models.CharField(max_length=15,unique=True,db_comment="Numero de partos de la mascota")    
    hisCliVacunacionVigente = models.BooleanField(db_comment="Si la mascota tiene o no las vacunas vigentes")
    hisCliUltVacunacion = models.DateField(db_comment="Hace referencia a la ultima vacunacion")
    hisCliProVacunacion = models.CharField(max_length=25,db_comment="nombre del producto utilizado enla vacunacion")    
    hisCliDesVigente = models.BooleanField(db_comment="Si la mascota esta o no desparasitada")
    hisCliConParasitos = models.DateField(db_comment="Hace referencia a la fecha de aplicacion del producto para control de parasitos")
    hisCliProDesparasitar = models.CharField(max_length=25,db_comment="nombre del producto utilizado para desparasitar")    
    hisCliConEctoparasitos = models.BooleanField(db_comment="si o no control de ectoparasitos")
    hisCliConEctoparasitos = models.DateField(db_comment="Hace referencia a la fecha del ultimo control de ectoparasitos")
    hisCliProEctoparasitos = models.CharField(max_length=25,db_comment="nombre del producto utilizado para control de ectoparasitos")    
    hisCliDieta = models.CharField(max_length=30,choices=dietaMascota,db_comment="Tipo de dieta")
    hisCliFreDieta = models.CharField(max_length=15,db_comment="La frecuencia con que se alimentala la mascota")    
    hisCliAnamnesicos = models.TextField(null=True,db_comment="En anamnesicos se describe la sintomatologia del animal")
    hisCliEnfAnteriores = models.TextField(null=True,db_comment="enfermedades que ha sufrido la mascota anteriormente")
    hisCliCirPrevias = models.TextField(null=True,db_comment="cirugias realizadas anteriormente")
    hisCliExaClinico = models.ForeignKey(ExamenClinico, on_delete=models.PROTECT,db_comment="Informacion del examen clinico")
    hisCliDiaDiferencial = models.CharField(max_length=100,db_comment="enfermedades posiblemte")
    hisCliDiaPresuntivo = models.CharField(max_length=50,db_comment="El posible diagnostico presuntivo")
    hisCliPronostico = models.CharField(max_length=50,db_comment="La evolucion de la mascota o pronostico")
      
    def __str__(self)->str:
        return f"{self.hisCliCodigo}-{self.hisCliMascota}"

    
class Urgencias(models.Model): 
    urgCodigo = models.IntegerField(unique=True,db_comment="codigo único asignado al registro de servicio de urgencias")
    urg = models.ForeignKey(TipoExamen, on_delete=models.PROTECT,db_comment="tipo de examen clinico")
    urgDescripcion = models.TextField(null=True,db_comment="Observaciones que se requieran hacer")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora de creacion")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización")
    
def __str__(self)->str:
        return f"{self.urgCodigo}-{self.urgHisClinica}-"


class Hospitalizacion(models.Model):
    hosCodigo = models.IntegerField(unique=True,db_comment="Codigo de la hospitaliacion")
    hosDescripcion =  models.IntegerField(null=True,db_comment= "Codigo de la hospitaliacion")
    hosValDia= models.IntegerField(db_comment="precio de la hospitalizacion por 24 horas")
    hosFecHorEntrada = models.DateField(db_comment="Fecha y hora de la hospitalizacion")
    hosFecHorSalida = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora del registro")

    def __str__(self)->str:
        return f"{self.hosCodigo}"
    
class Cirugia(models.Model):
    cirCodigo = models.IntegerField(unique=True,db_comment="Codigo para intervencion quirurgica")
    cirNomProcedimiento = models.TextField(max_length=100,db_comment="Nombre del Procedimiento")
    cirDescripcion = models.TextField(null=True,db_comment="Descripcion que se requieran hacer")
    cirValor = models.IntegerField(db_comment="Valor de Procedimiento Cirugia")  
    cirFechaHora = models.DateField(db_comment="Fecha de la cirugia")
    
    def __str__(self)->str:
        return f"{self.cirCodigo}-{self.cirNombre}"

class TipoExamen(models.Model):
    tipExaHematologia = models.CharField(max_length=45,choices=hematologia,db_comment="")
    tipExaPruebasCoagulacion=models.CharField(max_length=45,choices=pruebasCoagulacion,db_comment="")
    tipExaQuimicaSanguinea =models.CharField(max_length=45,choices=quimicaSanguinea,db_comment="")
    tipExaAnalisisLiquidosCorporales=models.CharField(max_length=45,choices=analisisLiquidosCorporales,db_comment="")
    tipExaHormonas=models.CharField(max_length=45,choices=hormonas,db_comment="")
    tipExaParasitologia =models.CharField(max_length=45,choices=parasitologia,db_comment="")
    tipExaOrina=models.CharField(max_length=45,choices=orina,db_comment="")
    tipExaExaDirectos =models.CharField(max_length=45,choices=examenesDirectos,db_comment="")
    tipExaExamenesDirectos=models.CharField(max_length=45,choices=cultivos,db_comment="")
    tipExaCultivos=models.CharField(max_length=45,choices=citologias,db_comment="")
    tipExaCitologias=models.CharField(max_length=45,choices=toxicologia,db_comment="")
    tipExaToxicologia= models.CharField(max_length=45,choices=miscelaneos,db_comment="")
    tipExaEnfInfCaninos = models.CharField(max_length=76,choices=enfermedadesInfecciosasCaninos,db_comment="nombre examenes Especializados")
    tipExaEnfFelinos = models.CharField(max_length=76,choices=enfermedadesFelinos,db_comment="nombre examenes Especializados")
    

class ExamenLaboratorio(models.Model):  
    exaEspMotivoConsulta = models.TextField(max_length=50,db_comment="Motivo de la consulta medica")
    exaLabTipExamen = models.ForeignKey(TipoExamen, on_delete=models.PROTECT,db_comment="tipo de examen clinico")
    exaEspDescripcion = models.TextField(null=True,db_comment="Descripcion que se requieran hacer")
    exaEspDiaPresuntivo = models.CharField(max_length=50,db_comment="posible diagnostico") 
    exaEspHorRemision = models.DateField(db_comment="Fecha y hora de la remision")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización de la mascota")
    
    def _str_(self)->str:
        return f"{self.exaEspCodigo}"


class ExamenEspecializado(models.Model):  
    exaEspCodigo = models.IntegerField(unique=True, db_comment="numero de orden para Examenes Especializados")
    exaEspNombre = models.CharField(max_length=15,choices=examenesEspecializados,db_comment="nombre examenes Especializados")
    exaEspDescripcion = models.TextField(null=True,db_comment="Descripcion que se requieran hacer")
    exaEspDiaPresuntivo = models.CharField(max_length=50,db_comment="posible diagnostico") 
    exaEspHorRemision = models.DateField(db_comment="Fecha y hora de la remision")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización de la mascota")
    
    def _str_(self)->str:
        return f"{self.exaEspCodigo}"


class Tratamiento(models.Model):
    traCodigo = models.IntegerField(unique=True, db_comment="codigo remision tratamiento")
    traDescripcion = models.TextField(null=True,db_comment="Descripcion del tratamiento")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora de creacion de la orden de tratamiento")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización de la mascota")
    
    def __str__(self)->str:
        return f"{self.traCodigo}"
    
class CitaVeterinaria(models.Model):
    citVetCodigo = models.IntegerField(unique=True,db_comment="Codigo de la coita con el veterinario")
    citVetAcompanante= models.CharField(max_length=100,db_comment="Nombre de la persona que ingresa con la mascota")
    citVetMascota = models.ForeignKey(Mascota,on_delete=models.PROTECT,db_comment="id de la mascota")
    citVetUsuario = models.ForeignKey(settings.AUTH_USER_MODEL,on_delete=models.PROTECT,
                                        db_comment="Hace referencia a usuario veterinario")
    citVetHisClinica = models.ForeignKey(HistoriaClinica,on_delete=models.PROTECT,db_comment="historia")
    #citVetRemision = models.ForeignKey(Remision,on_delete=models.PROTECT,db_comment="historia")
    citVetResultado = models.TextField(null=True,db_comment="Resultado de la cita")
    citVetEstado = models.CharField(max_length=10,unique=True,choices=estadoCita,db_comment="Estado de la cita")
    citPrecio= models.IntegerField(db_comment="valor de la consulta medica")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora del registro")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización")
    
    def __str__(self)->str:
        return f"{self.citVetCodigo}-{self.citVetMascota}-{self.citVetHisClinica}-{self.citVetUserCliente}"


class Remision(models.Model):
    remCodigo = models.IntegerField(unique=True,db_comment="Codigo de la remision")
    remCitVeterinaria= models.ForeignKey(CitaVeterinaria, on_delete=models.PROTECT,db_comment="se trae la citavetrinaria")
    remVetUsuario = models.ForeignKey(settings.AUTH_USER_MODEL,on_delete=models.PROTECT,
                                        db_comment="Hace referencia al veterinario que remite")
    remHospitalizacion = models.ForeignKey(Hospitalizacion, on_delete=models.PROTECT,db_comment="Remision a hospitalizacion al paciente")
    remCirugia = models.ForeignKey(Cirugia, on_delete=models.PROTECT,db_comment="Remision a cirugia")
    remExaEspecializado= models.ForeignKey(ExamenEspecializado, on_delete=models.PROTECT,db_comment="Remision a Examen Especializado")
    remExamenLaboratorio = models.ForeignKey(ExamenLaboratorio, on_delete=models.PROTECT,db_comment="Remision a remExamen Laboratorio")
    remTratamiento = models.ForeignKey(Tratamiento, on_delete=models.PROTECT,db_comment="Remision a Tratamiento")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora de creacion de la orden de tratamiento")
    

#class ServicioBienestar(models.Model):
 #   serBieCodigo = models.IntegerField(unique=True,db_comment="codigo único asignado al registro de servicio Bienestar")    
  #  serBieMascota = models.ForeignKey(Mascota, on_delete=models.PROTECT,db_comment="Informacion de la mascota")
   # serBieAuxUsuario = models.ForeignKey(settings.AUTH_USER_MODEL,on_delete=models.PROTECT,
     #                           db_comment="Usuario que realiza el servicio de bienestar")
    #serBieAcompanante= models.CharField(max_length=100,db_comment="Nombre de la persona que ingresa con la mascota")
    #serBieTipSerBienestar = models.CharField(max_length=28,choices=tipoServicioBienestar,db_comment="tipo de servicio de bienestar")
    #serBieEspecie = models.CharField(max_length=15,choices=especie,db_comment="nombre de la especie")
    #serBieTamMascota = models.CharField(max_length=15,choices=tamañoMascota,db_comment="tamaño de la mascota")
    #serBieLonPelo = models.CharField(max_length=15,choices=longitudPelo,db_comment="longitud del pelo de la mascota")
    #serBieValor = models.IntegerField(db_comment="Valor del servicio")  
    #fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora de creacion de la orden de tratamiento")
    
    #def __str__(self)->str:
     #   return f"{self.serBieTipSerBienestar}-{self.serBieUsuario}"
 
    
class Servicios(models.Model):
    serNombre= models.CharField(max_length=100,db_comment="Nombre del servicio")
    serTipo= models.CharField(max_length=10,unique=True,choices=tipoServicio,db_comment="tipo de servicio")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización")
       
def _str_(self)->str:
    return f"{self.serNombre}-{self.serTipo}"

class AgendarCita(models.Model):
    ageCitMascota = models.ForeignKey(Mascota,on_delete=models.PROTECT,db_comment="la mascota")
    ageCitTipServicios = models.ForeignKey(Servicios,on_delete=models.PROTECT,db_comment="Servicios que ofrece la clinica")
    fechaHoraCreacion  = models.DateTimeField(auto_now_add=True,db_comment="Fecha y hora del registro de la cita")
    fechaHoraActualizacion = models.DateTimeField(auto_now=True,db_comment="Fecha y hora última actualización")
    
def _str_(self)->str:
    return f"{self.ageCitTipMascota}-{self.ageCitTipServicios}"




